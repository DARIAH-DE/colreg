<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd 
              http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
               http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.3.xsd">

    

	<import resource="security-context-common.xml"/>
	<import resource="security-context-service-specific.xml"/>

    <!-- Scan for auto-wiring classes in spring saml packages -->
    <context:component-scan base-package="org.springframework.security.saml"/>  
    
	
    <!-- Filters for processing of SAML messages -->
    <bean id="authFilter" class="org.springframework.security.web.FilterChainProxy">
        <security:filter-chain-map request-matcher="ant">
            <security:filter-chain pattern="/saml/login/**" filters="securityEntryPoint"/>
            <security:filter-chain pattern="/saml/logout/**" filters="samlLogoutFilter"/>
            <security:filter-chain pattern="/saml/metadata/**" filters="metadataDisplayFilter"/>
            <security:filter-chain pattern="/saml/SSO/**" filters="samlWebSSOProcessingFilter"/>
            <security:filter-chain pattern="/saml/SSOHoK/**" filters="samlWebSSOHoKProcessingFilter"/>
            <security:filter-chain pattern="/saml/SingleLogout/**" filters="samlLogoutProcessingFilter"/>
            <security:filter-chain pattern="/saml/discovery/**" filters="samlIDPDiscovery"/>
        </security:filter-chain-map>
    </bean>


    <!-- Handler deciding where to redirect user after failed login -->
    <bean id="failureRedirectHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
        <property name="useForward" value="true"/>
        <property name="defaultFailureUrl" value="/errors"/>
    </bean>

    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="authenticationProvider"/>
    </security:authentication-manager>
    
    <!-- Logger for SAML messages and events -->
    <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger"/>

    <!-- Entry point to initialize authentication, default values taken from properties file -->
    <bean id="securityEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
        <property name="defaultProfileOptions">
            <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
                <property name="includeScoping" value="false"/>
            </bean>
        </property>
    </bean>

    <!-- IDP Discovery Service -->
    <bean id="samlIDPDiscovery" class="org.springframework.security.saml.SAMLDiscovery">
        <property name="idpSelectionPath" value="/WEB-INF/security/idpSelection.jsp"/>
    </bean>
    
    <bean id="metadataGenerator" class="eu.dariah.de.dariahsp.saml.metadata.AttributeMetadataGenerator" scope="prototype">
		<property name="entityBaseURL" value="${auth.saml.sp.baseUrl}" />
		<property name="entityId" value="${auth.saml.sp.entityId}" />
		<property name="includeDiscoveryExtension" value="${auth.saml.sp.discovery.enabled}" />
		<property name="nameID" value="#{'${auth.saml.sp.allowedNameIds:EMAIL,TRANSIENT,PERSISTENT,UNSPECIFIED,X509_SUBJECT}'.split(',')}" />
	    <property name="extendedMetadata" ref="localSpMetadata" />
	    <property name="requiredAttributes" ref="requiredAttributes" />
	</bean>
    
    <!-- Utilized only if path to external metadata has been set (compare bean id="metadata") -->
	<bean id="externalMetadata" class="org.springframework.security.saml.metadata.ExtendedMetadataDelegate">
	    <constructor-arg>
	        <bean class="eu.dariah.de.dariahsp.saml.metadata.ConditionalResourceMetadataProvider">
	            <constructor-arg>
	                <bean class="java.util.Timer"/>
	            </constructor-arg>
	            <constructor-arg>
	                <bean class="org.opensaml.util.resource.FilesystemResource">
	                    <constructor-arg value="${auth.saml.sp.externalMetadata:''}"/>
	                </bean>
	            </constructor-arg>
	            <constructor-arg ref="externalLocalSpMetadataConfigured" />
	            <property name="parserPool" ref="parserPool"/>
	        </bean>
	    </constructor-arg>
	    <constructor-arg ref="localSpMetadata" />
	</bean>
    
    <bean id="localSpMetadata" class="org.springframework.security.saml.metadata.ExtendedMetadata">
    	<property name="local" value="${auth.saml.sp.local:true}"/>
        <property name="alias" value="${auth.saml.sp.alias}"/>
        <property name="securityProfile" value="${auth.saml.sp.securityProfile:metaiop}"/>
        <property name="sslSecurityProfile" value="${auth.saml.sp.sslSecurityProfile:pkix}"/>
        <property name="sslHostnameVerification" value="${auth.saml.sp.sslHostnameVerification:default}"/>
    
    	<property name="encryptionKey" value="${auth.saml.sp.encryptionKey}" />
        <property name="tlsKey" value="${auth.saml.sp.tlsKey}" />
        <property name="signMetadata" value="${auth.saml.sp.signMetadata}" />
        
        <property name="ecpEnabled" value="${auth.saml.sp.ecpEnabled:true}" />
        <property name="signingKey" value="${auth.saml.sp.signingKey}" />
        
        <property name="requireArtifactResolveSigned" value="${auth.saml.sp.requireArtifactResolveSigned:true}"/>
        <property name="requireLogoutRequestSigned" value="${auth.saml.sp.requireLogoutRequestSigned:true}"/>
        <property name="requireLogoutResponseSigned" value="${auth.saml.sp.requireLogoutResponseSigned:false}"/>
        <property name="requireAttributeQuerySigned" value="${auth.saml.sp.requireAttributeQuerySigned:true}"/>
        
        <property name="signingAlgorithm" value="${auth.saml.sp.signingAlgorithm:http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}" />
        
        <property name="idpDiscoveryEnabled" value="${auth.saml.sp.discovery.enabled}" />
        <property name="idpDiscoveryURL" value="${auth.saml.sp.discovery.url}" />
        <property name="idpDiscoveryResponseURL" value="${auth.saml.sp.discovery.return}" />
    </bean>
 
    <!-- Configure HTTP Client to accept certificates from the keystore for HTTPS verification -->
    <!--
    <bean class="org.springframework.security.saml.trust.httpclient.TLSProtocolConfigurer">
        <property name="sslHostnameVerification" value="default"/>
    </bean>
    -->

	<bean id="externalLocalSpMetadataConfigured" class="java.lang.Boolean">
		<constructor-arg value="#{'${auth.saml.sp.externalMetadata:null}'!='null'}" />
	</bean>	

    <!-- IDP Metadata configuration - paths to metadata of IDPs in circle of trust is here -->
    <bean id="metadata" class="eu.dariah.de.dariahsp.saml.metadata.ConditionalMetadataManager">
    	<constructor-arg value="${auth.saml.sp.externalMetadata:#{null}}" />
    	<constructor-arg ref="externalMetadata" />
    	<constructor-arg value="${auth.saml.sp.entityId}"/>
        <constructor-arg>
            <list>
                
                <!-- Example of HTTP metadata without Extended Metadata -->
                <bean class="org.opensaml.saml2.metadata.provider.HTTPMetadataProvider">
                    <!-- URL containing the metadata -->
                    <constructor-arg>
                        <value type="java.lang.String">${auth.saml.metadata.url}</value>
                    </constructor-arg>
                    <!-- Timeout for metadata loading in ms -->
                    <constructor-arg>
                        <value type="int">15000</value>
                    </constructor-arg>
                    <property name="parserPool" ref="parserPool"/>
                    <property name="metadataFilter">
                    	<!-- Only include IDPs with fetched metadata -->
                    	<bean class="org.opensaml.saml2.metadata.provider.EntityRoleFilter">
                    		<constructor-arg>
                    			<list value-type="javax.xml.namespace.QName">
                    				<bean class="javax.xml.namespace.QName">
                    					<constructor-arg>
                    						<value type="java.lang.String">urn:oasis:names:tc:SAML:2.0:metadata</value>
                    					</constructor-arg>
                    					<constructor-arg>
                    						<value type="java.lang.String">IDPSSODescriptor</value>
                    					</constructor-arg>
                    				</bean>
                    				<bean class="javax.xml.namespace.QName">
                    					<constructor-arg>
                    						<value type="java.lang.String">urn:oasis:names:tc:SAML:2.0:metadata</value>
                    					</constructor-arg>
                    					<constructor-arg>
                    						<value type="java.lang.String">AttributeAuthorityDescriptor</value>
                    					</constructor-arg>
                    				</bean>
                    			</list>
                    		</constructor-arg>
                    	</bean>
                    </property>
                </bean>
            </list>
        </constructor-arg>
        
        <!-- OPTIONAL property: can tell the system which IDP should be used for authenticating user by default. -->
        <!-- <property name="defaultIDP" value="http://localhost:8080/opensso"/> -->
    </bean>

    <!-- SAML Authentication Provider responsible for validating of received SAML messages -->
    <bean id="authenticationProvider" class="eu.dariah.de.dariahsp.saml.SAMLAuthenticationProvider">
        <property name="userDetails" ref="userDetailsService" />
        <property name="attributeAggregationService" ref="attributeAggregationService" />
    </bean>
    

    
    <bean id="attributeAggregationService" class="eu.dariah.de.dariahsp.saml.attributequery.SAMLAttributeAggregationService">
    	<property name="attributeQuery" ref="attributeQuery" />
    	<property name="queryOptions" ref="attributeQueryOptions" />
    </bean>
    
    <bean id="attributeQueryOptions" class="eu.dariah.de.dariahsp.saml.attributequery.options.SAMLAttributeQueryOptions">
    	<constructor-arg ref="objectMapper" />
        <property name="performAggregation" value="${auth.saml.sp.attributeQuery.enabled:false}" />
        <property name="signedAssertionRequired" value="${auth.saml.sp.requireAttributeQuerySigned:true}" />
        <property name="attributeAuthorityIDP" value="${auth.saml.sp.attributeQuery.queryIdp:#{null}}" />
        <property name="queryByNameID" value="${auth.saml.sp.attributeQuery.queryByNameID:false}" />
        <property name="queryAttributeAsJson" value="${auth.saml.sp.attributeQuery.queryAttribute:#{null}}" />
        <property name="exclusionOptions">
        	<list>
        		<bean class="eu.dariah.de.dariahsp.saml.attributequery.options.SAMLAttributeQueryExclusionOptions">
        			<property name="assumeRequiredAttributes" value="${auth.saml.sp.attributeQuery.excludedEndpoints.assumeAttributesComplete:false}" />
        			<property name="excludedEndpoints" value="${auth.saml.sp.attributeQuery.excludedEndpoints.urls:#{null}}" />
        		</bean>
        	</list>
        </property>
        <property name="requiredAttributesList" ref="requiredAttributes" />
    </bean>
            
    <bean id="attributeQuery" class="eu.dariah.de.dariahsp.saml.attributequery.SAMLAttributeQueryImpl">
		<constructor-arg>
			<bean class="org.apache.commons.httpclient.HttpClient" />
		</constructor-arg>
		<property name="processor">
			<bean id="soapProcessor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
				<constructor-arg ref="soapBinding" />
			</bean>
		</property>
	</bean>
    

    <!-- Processing filter for WebSSO profile messages -->
    <bean id="samlWebSSOProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
        <property name="authenticationFailureHandler" ref="failureRedirectHandler"/>
    </bean>

    <!-- Processing filter for WebSSO Holder-of-Key profile -->
    <bean id="samlWebSSOHoKProcessingFilter" class="org.springframework.security.saml.SAMLWebSSOHoKProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationSuccessHandler" ref="successRedirectHandler"/>
        <property name="authenticationFailureHandler" ref="failureRedirectHandler"/>
    </bean>

    <!-- Logout handler terminating local session -->
    <bean id="logoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
        <property name="invalidateHttpSession" value="false"/>
    </bean>

    <!-- Override default logout processing filter with the one processing SAML messages -->
    <bean id="samlLogoutFilter" class="eu.dariah.de.dariahsp.saml.SAMLLogoutFilter">
        <constructor-arg index="0" ref="successLogoutHandler"/>
        <constructor-arg index="1" ref="logoutHandler"/>
        <constructor-arg index="2" ref="logoutHandler"/>
    </bean>

    <!-- Filter processing incoming logout messages -->
    <!-- First argument determines URL user will be redirected to after successful global logout -->
    <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
        <constructor-arg index="0" ref="successLogoutHandler"/>
        <constructor-arg index="1" ref="logoutHandler"/>
    </bean>

    <!-- Class loading incoming SAML messages from httpRequest stream -->
    <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
        <constructor-arg>
            <list>
                <ref bean="redirectBinding"/>
                <ref bean="postBinding"/>
                <ref bean="artifactBinding"/>
                <ref bean="soapBinding"/>
                <ref bean="paosBinding"/>
            </list>
        </constructor-arg>
    </bean>

    <!-- SAML 2.0 WebSSO Assertion Consumer -->
    <bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl">
    	<property name="maxAuthenticationAge" value="${auth.saml.sp.maxAuthAge:7200}" />
    </bean>

    <!-- SAML 2.0 Holder-of-Key WebSSO Assertion Consumer -->
    <bean id="hokWebSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl">
    	<property name="maxAuthenticationAge" value="${auth.saml.sp.maxAuthAge:7200}" />
    </bean>

    <!-- SAML 2.0 Web SSO profile -->
    <bean id="webSSOprofile" class="org.springframework.security.saml.websso.WebSSOProfileImpl"/>

    <!-- SAML 2.0 Holder-of-Key Web SSO profile -->
    <bean id="hokWebSSOProfile" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl"/>

    <!-- SAML 2.0 ECP profile -->
    <bean id="ecpprofile" class="org.springframework.security.saml.websso.WebSSOProfileECPImpl"/>

    <!-- SAML 2.0 Logout Profile -->
    <bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl"/>

    <!-- Bindings, encoders and decoders used for creating and parsing messages -->
    <bean id="postBinding" class="org.springframework.security.saml.processor.HTTPPostBinding">
        <constructor-arg ref="parserPool"/>
        <constructor-arg ref="velocityEngine"/>
    </bean>

    <bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <bean id="artifactBinding" class="org.springframework.security.saml.processor.HTTPArtifactBinding">
        <constructor-arg ref="parserPool"/>
        <constructor-arg ref="velocityEngine"/>
        <constructor-arg>
            <bean class="org.springframework.security.saml.websso.ArtifactResolutionProfileImpl">
                <constructor-arg>
                    <bean class="org.apache.commons.httpclient.HttpClient">
                        <constructor-arg>
                            <bean class="org.apache.commons.httpclient.MultiThreadedHttpConnectionManager"/>
                        </constructor-arg>
                    </bean>
                </constructor-arg>
                <property name="processor">
                    <bean class="org.springframework.security.saml.processor.SAMLProcessorImpl">
                        <constructor-arg ref="soapBinding"/>
                    </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="soapBinding" class="org.springframework.security.saml.processor.HTTPSOAP11Binding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <bean id="paosBinding" class="org.springframework.security.saml.processor.HTTPPAOS11Binding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <!-- Initialization of the velocity engine -->
    <bean id="velocityEngine" class="org.springframework.security.saml.util.VelocityFactory" factory-method="getEngine"/>

    <!-- 
        XML parser pool needed for OpenSAML parsing

        WARNING: If customizing a ParserPool implementation See https://shibboleth.net/community/advisories/secadv_20131213.txt
                 Specifically the following should be explicitly set to avoid exploits:
                 
                 1) set pool property 'expandEntityReferences' to 'false'
                 2) set feature 'javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING' to true
                 3) set feature 'http://apache.org/xml/features/disallow-doctype-decl' to true. This is a Xerces-specific feature,
                    including derivatives such as the internal JAXP implementations supplied with the Oracle and OpenJDK JREs. For
                    other JAXP implementations, consult the documentation for the implementation for guidance on how to achieve a
                    similar configuration.
    -->
    <bean id="parserPool" class="org.opensaml.xml.parse.StaticBasicParserPool" init-method="initialize"/>

    <bean id="parserPoolHolder" class="org.springframework.security.saml.parser.ParserPoolHolder"/>

</beans>